@page "/onboarding/{workflowInstanceId}"

@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json.Linq
@using WebApp.V3.Components
@using WebApp.V3.Services

@implements IDisposable

@inject HubConnection HubConnection
@inject IUserTaskService UserTaskService; 
@inject NavigationManager NavigationManager;

@if (HasUserTask() && !string.IsNullOrWhiteSpace(userTaskViewModel.UIDefinition))
{
    Type? formType = null;
    try
    {
        formType = Type.GetType(userTaskViewModel.UIDefinition);
    }
    catch {}
    if (formType == null)
    {
        <h2>Unknown form to display.</h2>
    }
    else
    {
        <div class="border border-primary my-1 p-1">
            <DynamicComponent @ref="dc" Type="@Type.GetType(userTaskViewModel.UIDefinition)"/>
            @if (userTaskViewModel.AllowPrevious)
            {
                <button class="btn btn-primary" onclick="@GoToPrevious">Previous</button>
            }
            <button class="btn btn-primary" onclick="@Continue">Continue</button>
        </div>
    }
}
else
{
    <h2>Processing work...</h2>
    <p>@latestNotification?.Description</p>
}


@code {

    private JToken dynamicComponentData;

    private DynamicComponent dc;

    [Parameter]
    public string workflowInstanceId { get; set; } = string.Empty;

    private WorkflowInstanceInfo? latestNotification;
    private UserTaskViewModel? userTaskViewModel;

    protected override async Task OnInitializedAsync()
    {
        await HubConnection.InvokeAsync("LeaveWorkflowInstanceGroup", workflowInstanceId);

        //setup notifications listener
        HubConnection.On<WorkflowInstanceInfo>("WorkflowInstanceUpdate", async notification => { await UpdateForNotification(notification); });
        await HubConnection.InvokeAsync("JoinWorkflowInstanceGroup", workflowInstanceId);
    }

    protected async override Task OnParametersSetAsync()
    {
        await LoadTask();
        await base.OnParametersSetAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {

        if (dc != null && dc.Instance != null && userTaskViewModel != null)
        {
            if (userTaskViewModel.Metadata.ContainsKey(userTaskViewModel.ActivityId))
            {
                var component = dc.Instance as ICustomDynamicComponent;
                component.SetValue(userTaskViewModel.Metadata[userTaskViewModel.ActivityId]);
            }
        }
    }

    private async Task GoToPrevious()
    {
        var component = dc.Instance as ICustomDynamicComponent;
        dynamicComponentData = JToken.FromObject(component.GetValue());
        var activityId = userTaskViewModel?.ActivityId ?? string.Empty;
        var signal = userTaskViewModel?.Signal ?? string.Empty;
        TaskFinished();
        await UserTaskService.MarkAsCompleteDispatched(workflowInstanceId, activityId, true, signal, dynamicComponentData);
    }

    private async Task Continue()
    {
        var component = dc.Instance as ICustomDynamicComponent;
        dynamicComponentData = JToken.FromObject(component.GetValue());
        var activityId = userTaskViewModel?.ActivityId ?? string.Empty;
        var signal = userTaskViewModel?.Signal ?? string.Empty;
        TaskFinished();
        await UserTaskService.MarkAsCompleteDispatched(workflowInstanceId, activityId,false, signal, dynamicComponentData);
    }

    private void TaskFinished()
    {
        userTaskViewModel = null;
    }

    private async Task UpdateForNotification(WorkflowInstanceInfo notification)
    {
        latestNotification = notification;

        if (notification.IsUsertask && notification.WorkflowSubState == "Suspended" && !HasUserTask())
        {
            await LoadTask();
            await InvokeAsync(() => { StateHasChanged(); });
        }

        if (latestNotification.WorkflowState == "Finished" || notification.WorkflowSubState == "Suspended")
        {
            await InvokeAsync(() => { StateHasChanged(); });
        }
    }


    private async Task LoadTask()
    {
        TimeSpan initialDelay = TimeSpan.FromMilliseconds(500); // Initial delay of 0.5 seconds
        TimeSpan currentDelay = initialDelay;
        int maxIterations = 4;
        int iterationCount = 0;
        string errorMessage = null;

        while (iterationCount < maxIterations)
        {
            userTaskViewModel = await UserTaskService.GetUserTasksFor(workflowInstanceId);

            // Workaround for initial item that will not load an item.
            if (userTaskViewModel?.UIDefinition != "reload")
            {
                break; // Exit the loop if UIDefinition is not "reload"
            }

            await Task.Delay(currentDelay);

            currentDelay = TimeSpan.FromMilliseconds(currentDelay.TotalMilliseconds * 2); // Double the current delay

            iterationCount++;
        }

        if (iterationCount == maxIterations)
        {
            latestNotification = new WorkflowInstanceInfo { Description = "Could not load, refresh page" };
        }
    }


    public async void Dispose()
    {
        await HubConnection.InvokeAsync("LeaveWorkflowInstanceGroup", workflowInstanceId);
    }

    private bool HasUserTask()
    {
        return userTaskViewModel != null && userTaskViewModel.UIDefinition != "reload";
    }

    private class WorkflowInstanceInfo
    {
        public string WorkflowState { get; set; }
        public string WorkflowSubState { get; set; }
        public bool IsUsertask { get; set; }
        public string Description { get; set; }
    }
}